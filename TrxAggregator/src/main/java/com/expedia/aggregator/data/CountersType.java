//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.08.26 at 08:47:47 PM IST 
//


package com.expedia.aggregator.data;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for CountersType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CountersType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;attribute name="total" type="{http://www.w3.org/2001/XMLSchema}int" />
 *       &lt;attribute name="error" type="{http://www.w3.org/2001/XMLSchema}int" default="0" />
 *       &lt;attribute name="failed" type="{http://www.w3.org/2001/XMLSchema}int" default="0" />
 *       &lt;attribute name="timeout" type="{http://www.w3.org/2001/XMLSchema}int" default="0" />
 *       &lt;attribute name="aborted" type="{http://www.w3.org/2001/XMLSchema}int" default="0" />
 *       &lt;attribute name="inconclusive" type="{http://www.w3.org/2001/XMLSchema}int" default="0" />
 *       &lt;attribute name="passedButRunAborted" type="{http://www.w3.org/2001/XMLSchema}int" default="0" />
 *       &lt;attribute name="notRunnable" type="{http://www.w3.org/2001/XMLSchema}int" default="0" />
 *       &lt;attribute name="notExecuted" type="{http://www.w3.org/2001/XMLSchema}int" default="0" />
 *       &lt;attribute name="executed" type="{http://www.w3.org/2001/XMLSchema}int" default="0" />
 *       &lt;attribute name="disconnected" type="{http://www.w3.org/2001/XMLSchema}int" default="0" />
 *       &lt;attribute name="warning" type="{http://www.w3.org/2001/XMLSchema}int" default="0" />
 *       &lt;attribute name="passed" type="{http://www.w3.org/2001/XMLSchema}int" default="0" />
 *       &lt;attribute name="completed" type="{http://www.w3.org/2001/XMLSchema}int" default="0" />
 *       &lt;attribute name="inProgress" type="{http://www.w3.org/2001/XMLSchema}int" default="0" />
 *       &lt;attribute name="pending" type="{http://www.w3.org/2001/XMLSchema}int" default="0" />
 *       &lt;attribute name="value" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CountersType")
public class CountersType {

    @XmlAttribute(name = "total")
    protected Integer total;
    @XmlAttribute(name = "error")
    protected Integer error;
    @XmlAttribute(name = "failed")
    protected Integer failed;
    @XmlAttribute(name = "timeout")
    protected Integer timeout;
    @XmlAttribute(name = "aborted")
    protected Integer aborted;
    @XmlAttribute(name = "inconclusive")
    protected Integer inconclusive;
    @XmlAttribute(name = "passedButRunAborted")
    protected Integer passedButRunAborted;
    @XmlAttribute(name = "notRunnable")
    protected Integer notRunnable;
    @XmlAttribute(name = "notExecuted")
    protected Integer notExecuted;
    @XmlAttribute(name = "executed")
    protected Integer executed;
    @XmlAttribute(name = "disconnected")
    protected Integer disconnected;
    @XmlAttribute(name = "warning")
    protected Integer warning;
    @XmlAttribute(name = "passed")
    protected Integer passed;
    @XmlAttribute(name = "completed")
    protected Integer completed;
    @XmlAttribute(name = "inProgress")
    protected Integer inProgress;
    @XmlAttribute(name = "pending")
    protected Integer pending;
    @XmlAttribute(name = "value")
    protected String value;

    /**
     * Gets the value of the total property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getTotal() {
        return total;
    }

    /**
     * Sets the value of the total property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setTotal(Integer value) {
        this.total = value;
    }

    /**
     * Gets the value of the error property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getError() {
        if (error == null) {
            return  0;
        } else {
            return error;
        }
    }

    /**
     * Sets the value of the error property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setError(Integer value) {
        this.error = value;
    }

    /**
     * Gets the value of the failed property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getFailed() {
        if (failed == null) {
            return  0;
        } else {
            return failed;
        }
    }

    /**
     * Sets the value of the failed property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setFailed(Integer value) {
        this.failed = value;
    }

    /**
     * Gets the value of the timeout property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getTimeout() {
        if (timeout == null) {
            return  0;
        } else {
            return timeout;
        }
    }

    /**
     * Sets the value of the timeout property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setTimeout(Integer value) {
        this.timeout = value;
    }

    /**
     * Gets the value of the aborted property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getAborted() {
        if (aborted == null) {
            return  0;
        } else {
            return aborted;
        }
    }

    /**
     * Sets the value of the aborted property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setAborted(Integer value) {
        this.aborted = value;
    }

    /**
     * Gets the value of the inconclusive property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getInconclusive() {
        if (inconclusive == null) {
            return  0;
        } else {
            return inconclusive;
        }
    }

    /**
     * Sets the value of the inconclusive property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setInconclusive(Integer value) {
        this.inconclusive = value;
    }

    /**
     * Gets the value of the passedButRunAborted property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getPassedButRunAborted() {
        if (passedButRunAborted == null) {
            return  0;
        } else {
            return passedButRunAborted;
        }
    }

    /**
     * Sets the value of the passedButRunAborted property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setPassedButRunAborted(Integer value) {
        this.passedButRunAborted = value;
    }

    /**
     * Gets the value of the notRunnable property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getNotRunnable() {
        if (notRunnable == null) {
            return  0;
        } else {
            return notRunnable;
        }
    }

    /**
     * Sets the value of the notRunnable property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setNotRunnable(Integer value) {
        this.notRunnable = value;
    }

    /**
     * Gets the value of the notExecuted property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getNotExecuted() {
        if (notExecuted == null) {
            return  0;
        } else {
            return notExecuted;
        }
    }

    /**
     * Sets the value of the notExecuted property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setNotExecuted(Integer value) {
        this.notExecuted = value;
    }

    /**
     * Gets the value of the executed property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getExecuted() {
        if (executed == null) {
            return  0;
        } else {
            return executed;
        }
    }

    /**
     * Sets the value of the executed property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setExecuted(Integer value) {
        this.executed = value;
    }

    /**
     * Gets the value of the disconnected property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getDisconnected() {
        if (disconnected == null) {
            return  0;
        } else {
            return disconnected;
        }
    }

    /**
     * Sets the value of the disconnected property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setDisconnected(Integer value) {
        this.disconnected = value;
    }

    /**
     * Gets the value of the warning property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getWarning() {
        if (warning == null) {
            return  0;
        } else {
            return warning;
        }
    }

    /**
     * Sets the value of the warning property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setWarning(Integer value) {
        this.warning = value;
    }

    /**
     * Gets the value of the passed property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getPassed() {
        if (passed == null) {
            return  0;
        } else {
            return passed;
        }
    }

    /**
     * Sets the value of the passed property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setPassed(Integer value) {
        this.passed = value;
    }

    /**
     * Gets the value of the completed property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getCompleted() {
        if (completed == null) {
            return  0;
        } else {
            return completed;
        }
    }

    /**
     * Sets the value of the completed property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setCompleted(Integer value) {
        this.completed = value;
    }

    /**
     * Gets the value of the inProgress property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getInProgress() {
        if (inProgress == null) {
            return  0;
        } else {
            return inProgress;
        }
    }

    /**
     * Sets the value of the inProgress property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setInProgress(Integer value) {
        this.inProgress = value;
    }

    /**
     * Gets the value of the pending property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getPending() {
        if (pending == null) {
            return  0;
        } else {
            return pending;
        }
    }

    /**
     * Sets the value of the pending property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setPending(Integer value) {
        this.pending = value;
    }

    /**
     * Gets the value of the value property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getValue() {
        return value;
    }

    /**
     * Sets the value of the value property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setValue(String value) {
        this.value = value;
    }

}
